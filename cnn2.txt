#Importing the libraries
import numpy as np
import tensorflow as tf
import keras
from keras.datasets import cifar10
from keras.models import Sequential
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D, Dropout
import warnings
warnings.filterwarnings('ignore')

#Initializing the values
batch_size = 128
num_classes = 10
epochs = 2

#Splitting the dataset into train and test sets
(x_train,y_train),(x_test,y_test) = cifar10.load_data()
x_train = x_train.reshape(50000,32,32,3)
x_test = x_test.reshape(10000,32,32,3)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')

#Normalize values 0 to 1 range
x_train/=255
x_test/=255
print(x_train.shape[0],'train samples')
print(x_test.shape[0],'test samples')

#Convert class vectors to binary class matrices
from tensorflow.keras.utils import to_categorical
y_train = to_categorical(y_train,num_classes)
y_test = to_categorical(y_test,num_classes)

#Viewing an image
import pylab as plt
print('label:',y_test[400:401])
plt.imshow(x_test[400:401].reshape(32,32,3),cmap='gray')
plt.show()

#Model Creation
model = Sequential()
model.add(Conv2D(8, kernel_size = (3,3), activation = 'relu', input_shape = (32,32,3)))
model.add(Conv2D(filters = 16, kernel_size = (3,3), activation = 'relu'))
model.add(MaxPooling2D(pool_size= (2,2)))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(32,activation = 'relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation = 'softmax'))
model.summary()

#Model compilation
model.compile(loss = keras.losses.categorical_crossentropy, optimizer = tf.keras.optimizers.Adam(), metrics = ['accuracy'])
model.fit(x_train, y_train, batch_size = batch_size, epochs = epochs, verbose = 1, validation_data = (x_test,y_test))

#Model Evaluation
score = model.evaluate(x_test,y_test, verbose = 0)
print('Test Loss: ', score[0])
print('Test Accuracy: ', score[1])

#Comparing the Original Image with the predicted value
import pylab as plt
plt.imshow(x_test[400:401].reshape(32,32,3), cmap= 'gray')
plt.show()

import numpy as np
prediction = model.predict(x_test[1:2])
print('Prediction score :\n',prediction[0])
thresholded = (prediction > 0.5)*1
print('\nThresholded score: \n',thresholded[0])
print('Prediction digit :\n',np.where(thresholded ==1)[1][0])
